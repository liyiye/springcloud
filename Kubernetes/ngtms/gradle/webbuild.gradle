import org.apache.tools.ant.filters.ReplaceTokens
import com.bmuschko.gradle.docker.tasks.image.*
plugins {
    id "com.bmuschko.docker-java-application" version "4.8.0"       //通过其远程API管理Docker镜像和容器.
    id "com.bmuschko.docker-remote-api" version "4.8.0"             //Gradle插件,通过其远程API管理Docker镜像和容器.
}
apply plugin: 'war'
apply plugin: 'application'
apply plugin: 'com.bmuschko.docker-remote-api'
apply plugin: 'com.bmuschko.docker-java-application'

webAppDirName = 'html'
mainClassName = 'com.wo56.business.StartWebServer'
applicationDefaultJvmArgs = ["-Djava.awt.headless=true -Djava.net.preferIPv4Stack=true -Dsun.net.inetaddr.ttl=10 -Djava.security.egd=file:/dev/zero -Dfile.encoding=GBK"]

dependencies {
    compile (
    	project(':common'),
		'net.sf.sevenzipjbinding:sevenzipjbinding:9.20-2.00beta',
		'org.beetl:beetl-core:2.1.0',
		'ant:ant:1.6.5'
	)
}

war {
	def buildTimestamp = new Date().format('ddHHmmss')
	eachFile {
		if (it.name.indexOf('.html') > 0) {
	    	filter(ReplaceTokens, tokens: ['title': project.ext.title, 'ver': buildTimestamp],  beginToken : '${', endToken : '}')
	    }
	}
}


def env = System.getProperty("env") ?: "dev"

def loadEnvConfig(env) {
    def configFile = file('../config.groovy')
    new ConfigSlurper(env).parse(configFile.toURL()).toProperties()
}

processResources {
		filter(ReplaceTokens, tokens: loadEnvConfig(env))
}

/**
 * ===================================================================================================================
 * -------------------------------------------      docker相关配置        ---------------------------------------------
 * ===================================================================================================================
 */

// Dockerfile文件存放地址
String dockerFileDir = 'build/docker'

//docker文件
String dockFilePath = "${dockerFileDir}/Dockerfile"


docker {
	url = 'tcp://192.168.132.100:2375'
	registryCredentials {
		username = 'liyiye'
		password = 'Li_yiye123456'
	}
}

/**
 * 创建Dockerfile文件.
 */
task createDockerfile(type: Dockerfile) {
    //指定脚本分组
    group = "docker"
    //脚本依赖 build任务
    dependsOn war
    //指定生成的Dockerfile所处的位置.
    destFile = project.file(dockFilePath)
    //指定依赖的基础镜像
    from '192.168.132.100/ghc/ghcbase:1.0.0'
    
    //添加参数
    arg "FILE"
    //编译时将jar包保存进去
    copyFile('${FILE}', "/app/")
    runCommand("unzip /app/${project.name}-${project.version}.war -d /app/ && rm -rf /app/${project.name}-${project.version}.war ")
    exposePort(80)
    //指定脚本执行命令
    entryPoint("java", "com.framework.core.inter.FrameworkApplication","WEB")
}

/**
 * 构建基础镜像
 */
task buildImage(type: DockerBuildImage) {
    group = 'docker'
    dependsOn createDockerfile
    //指定Dockerfile文件
    //inputDir = project.file("${project.rootDir}")
    inputDir = project.file("build/")
    dockerFile = project.file(dockFilePath)
    //标签
    tags = ["192.168.132.100/ghc/${project.name}:${project.version}"]
    //指定在执行build命令时,使用的构建参数.
    buildArgs = ["FILE": "libs/${project.name}-${project.version}.war"]
}
/**
 * 构建基础镜像
 */
task pushImage(type: DockerPushImage) {
	dependsOn buildImage
    group = 'docker'
    imageName="192.168.132.100/ghc/${project.name}:${project.version}"
}
